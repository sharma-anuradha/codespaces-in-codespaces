// WARNING: AUTO GENERATED BY KUSTO COMPILER.
// See vsclk-core repository for details.
// Source File: Dashboards\Reliability\Shutdown\BuildingBlocks\ShutdownOutcomeEvents.ksf
// Stitches together events from a shutdown request to a possible outcome.
// Scoped events for last 7 days and on prod ring.
let ScopedRawEvents = DefaultEvent
    | where ['time'] between (ago(7d) .. now())
    | where ServiceEnvironment == "vsclk-online-prod";
let ShutdownEnvironmentPOSTRequestEvents = ScopedRawEvents
    | where HttpRequestMethod == "POST" and HttpRequestUri startswith "/api/v1/environments" and HttpRequestUri endswith "/shutdown";
let ShutdownEnvironmentRequestStartEvents = ShutdownEnvironmentPOSTRequestEvents
    | where msg == "request_start" 
    | extend EventAtShutdownRequestStart = 1
    | extend EventAtShutdownRequestStart_Time = ["time"]
    | extend EventAtShutdownRequestStart_CorrelationId = CorrelationId
    | project EventAtShutdownRequestStart, EventAtShutdownRequestStart_Time, EventAtShutdownRequestStart_CorrelationId,
        Service, CommitId, ServiceEnvironment, ServiceInstance, ServiceStamp, ServiceLocation, BuildId
    | summarize arg_min(EventAtShutdownRequestStart_Time, *) by EventAtShutdownRequestStart_CorrelationId;
let ShutdownEnvironmentRequestStopEvents = ShutdownEnvironmentPOSTRequestEvents
    | where msg == "request_stop"
    | extend EventAtShutdownRequestStop_Time = ["time"]
    | extend EventAtShutdownRequestStop_ResponseCode = toint(HttpResponseStatus)
    | extend EventAtShutdownRequestStop = 1
    | extend EventAtShutdownRequestStop_CorrelationId = CorrelationId
    | project EventAtShutdownRequestStop_ResponseCode, EventAtShutdownRequestStop_CorrelationId, EventAtShutdownRequestStop_Time, EventAtShutdownRequestStop
    | summarize arg_max(EventAtShutdownRequestStop_Time, *) by EventAtShutdownRequestStop_CorrelationId;
let ShutdownEnvironmentRequestSkuResolveEvents = ShutdownEnvironmentPOSTRequestEvents
    | where msg == "environmentstatemanager_setenvironmentstateasync"
    | extend EventAtShutdownSkuResolve = 1
    | extend EventAtShutdownSkuResolve_Time = ["time"]
    | extend EventAtShutdownSkuResolve_CorrelationId = CorrelationId
    | extend EventAtShutdownSkuResolve_SkuName = SkuName
    | extend EventAtShutdownSkuResolve_WorkspaceId = WorkspaceId
    | project EventAtShutdownSkuResolve, 
        EventAtShutdownSkuResolve_Time, 
        EventAtShutdownSkuResolve_CorrelationId, 
        EventAtShutdownSkuResolve_SkuName, 
        EventAtShutdownSkuResolve_WorkspaceId;
let GetStateTransitionEvents = (fromState: string, toState: string) { 
    ScopedRawEvents
        | where msg == "environmentstatemanager_setenvironmentstateasync"
        | where CloudEnvironmentOldState == fromState and CloudEnvironmentNewState == toState
        | project CloudEnvironmentOldState, CloudEnvironmentNewState, ['time'], WorkspaceId, CloudEnvironmentFailedStateReason, HttpRequestMethod, HttpRequestUri, CorrelationId, CloudEnvironmentId, CloudEnvironmentNewUpdatedTrigger
        | summarize arg_max(['time'], *) by CloudEnvironmentOldState, CloudEnvironmentNewState, WorkspaceId, CorrelationId, CloudEnvironmentId
};
let AvailableToShuttingDownEvents = GetStateTransitionEvents(fromState="Available", toState="ShuttingDown")
    | extend EventAtAvailableToShuttingDown = 1
    | extend EventAtAvailableToShuttingDown_Time = ['time']
    | extend EventAtAvailableToShuttingDown_UserInitiated = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestUri endswith "/shutdown" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtAvailableToShuttingDown_UserInitiatedDelete = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestMethod == "DELETE", 1, 0)
    | extend EventAtAvailableToShuttingDown_ViaHeartbeat = iff(HttpRequestUri == "/api/v1/heartbeat" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtAvailableToShuttingDown_CorrelationId = CorrelationId
    | extend EventAtAvailableToShuttingDown_WorkspaceId = WorkspaceId
    | project EventAtAvailableToShuttingDown, 
        EventAtAvailableToShuttingDown_Time, 
        EventAtAvailableToShuttingDown_UserInitiated, 
        EventAtAvailableToShuttingDown_UserInitiatedDelete,
        EventAtAvailableToShuttingDown_ViaHeartbeat,
        EventAtAvailableToShuttingDown_CorrelationId,
        EventAtAvailableToShuttingDown_WorkspaceId;
let UnavailableToShutDownEvents = GetStateTransitionEvents(fromState="Unavailable", toState="Shutdown")
    | extend EventAtUnavailableToShutdown = 1
    | extend EventAtUnavailableToShutdown_Time = ['time']
    | extend EventAtUnavailableToShutdown_UserInitiated = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestUri endswith "/shutdown" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtUnavailableToShutdown_UserInitiatedDelete = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestMethod == "DELETE", 1, 0)
    | extend EventAtUnavailableToShutdown_ViaHeartbeat = iff(HttpRequestUri == "/api/v1/heartbeat" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtUnavailableToShutdown_CorrelationId = CorrelationId
    | project EventAtUnavailableToShutdown,
        EventAtUnavailableToShutdown_Time,
        EventAtUnavailableToShutdown_UserInitiated,
        EventAtUnavailableToShutdown_UserInitiatedDelete,
        EventAtUnavailableToShutdown_ViaHeartbeat,
        EventAtUnavailableToShutdown_CorrelationId;
let StartingToShutdownEvents = GetStateTransitionEvents(fromState="Starting", toState="Shutdown")
    | extend EventAtStartingToShutdown = 1
    | extend EventAtStartingToShutdown_Time = ['time']
    | extend EventAtStartingToShutdown_UserInitiated = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestUri endswith "/shutdown" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtStartingToShutdown_ForUserInitiatedDelete = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestMethod == "DELETE", 1, 0)
    | extend EventAtStartingToShutdown_HeartBeatInitiated = iff(HttpRequestUri == "/api/v1/heartbeat" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtStartingToShutdown_CorrelationId = CorrelationId
    | extend EventAtStartingToShutdown_WorkspaceId = WorkspaceId
    | project EventAtStartingToShutdown, 
        EventAtStartingToShutdown_Time,
        EventAtStartingToShutdown_UserInitiated, 
        EventAtStartingToShutdown_ForUserInitiatedDelete, 
        EventAtStartingToShutdown_HeartBeatInitiated, 
        EventAtStartingToShutdown_CorrelationId, 
        EventAtStartingToShutdown_WorkspaceId;
let StartingToArchivedEvents = GetStateTransitionEvents(fromState="Starting", toState="Archived")
    | extend EventAtStartingToArchived = 1
    | extend EventAtStartingToArchived_Time = ['time']
    | extend EventAtStartingToArchived_UserInitiated = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestUri endswith "/shutdown" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtStartingToArchived_CorrelationId = CorrelationId
    | extend EventAtStartingToArchived_WorkspaceId = WorkspaceId
    | project EventAtStartingToArchived,
        EventAtStartingToArchived_Time, 
        EventAtStartingToArchived_UserInitiated, 
        EventAtStartingToArchived_CorrelationId, 
        EventAtStartingToArchived_WorkspaceId;
let ShuttingDownToShutdownEvents = GetStateTransitionEvents(fromState="ShuttingDown", toState="Shutdown")
    | extend EventAtShuttingDownToShutdown = 1
    | extend EventAtShuttingDownToShutdown_Time = ['time']
    | extend EventAtShuttingDownToShutdown_UserInitiated = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestUri endswith "/shutdown" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtShuttingDownToShutdown_UserInitiatedDelete = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestMethod == "DELETE", 1, 0)
    | extend EventAtShuttingDownToShutdown_ViaHeartbeat = iff(HttpRequestUri == "/api/v1/heartbeat" and HttpRequestMethod == "POST", 1, 0)
    | extend EventAtShuttingDownToShutdown_CorrelationId = CorrelationId
    | extend EventAtShuttingDownToShutdown_Forced = iff(CloudEnvironmentNewUpdatedTrigger == "ForceEnvironmentShutdown", 1, 0)
    | extend EventAtShuttingDownToShutdown_WorkspaceId = WorkspaceId
    | project EventAtShuttingDownToShutdown,
        EventAtShuttingDownToShutdown_Time,
        EventAtShuttingDownToShutdown_UserInitiated,
        EventAtShuttingDownToShutdown_UserInitiatedDelete,
        EventAtShuttingDownToShutdown_ViaHeartbeat,
        EventAtShuttingDownToShutdown_CorrelationId,
        EventAtShuttingDownToShutdown_Forced,
        EventAtShuttingDownToShutdown_WorkspaceId;
let ShuttingDownToDeletedEvents = GetStateTransitionEvents(fromState="ShuttingDown", toState="Deleted")
    | extend EventAtShuttingDownToDeleted = 1
    | extend EventAtShuttingDownToDeleted_Time = ['time']
    | extend EventAtShuttingDownToDeleted_UserInitiatedDelete = iff(HttpRequestUri startswith "/api/v1/environments/" and HttpRequestMethod == "DELETE", 1, 0)
    | extend EventAtShuttingDownToDeleted_CorrelationId = CorrelationId
    | extend EventAtShuttingDownToDeleted_WorkspaceId = WorkspaceId
    | project EventAtShuttingDownToDeleted, 
        EventAtShuttingDownToDeleted_Time,
        EventAtShuttingDownToDeleted_UserInitiatedDelete,
        EventAtShuttingDownToDeleted_CorrelationId,
        EventAtShuttingDownToDeleted_WorkspaceId;
let ShutdownOutcomeEvents = ShutdownEnvironmentRequestStartEvents
    | join kind=leftouter (ShutdownEnvironmentRequestSkuResolveEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtShutdownSkuResolve_CorrelationId
    | join kind=leftouter (ShutdownEnvironmentRequestStopEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtShutdownRequestStop_CorrelationId
    | join kind=leftouter (AvailableToShuttingDownEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtAvailableToShuttingDown_CorrelationId
    | join kind=leftouter (UnavailableToShutDownEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtUnavailableToShutdown_CorrelationId
    | join kind=leftouter (StartingToShutdownEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtStartingToShutdown_CorrelationId
    | join kind=leftouter (StartingToArchivedEvents) on $left.EventAtShutdownRequestStart_CorrelationId == $right.EventAtStartingToArchived_CorrelationId
    | join kind=leftouter (ShuttingDownToShutdownEvents) on $left.EventAtShutdownSkuResolve_WorkspaceId == $right.EventAtShuttingDownToShutdown_WorkspaceId
    | join kind=leftouter (ShuttingDownToDeletedEvents) on $left.EventAtShutdownSkuResolve_WorkspaceId == $right.EventAtShuttingDownToDeleted_WorkspaceId;
