using Microsoft.VsCloudKernel.Services.KustoCompiler.Processor;
using System;
using System.IO;
using System.Text;

namespace Microsoft.VsCloudKernel.Services.KustoCompiler
{
    public class Compiler
    {
        private PreProcessor preProcessor = new PreProcessor();

        public void Execute(string input, string output, string wildcardFilter)
        {
            if (Directory.Exists(input))
            {
                var fullInputPath = Path.GetFullPath(input);
                var fullOutputPath = Path.GetFullPath(output);
                ProcessDirectory(fullInputPath, fullOutputPath, wildcardFilter);
            }
            else if (File.Exists(input))
            {
                var fullInputPath = Path.GetFullPath(input);
                var fullOutputPath = Path.GetFullPath(output);
                ProcessFile(fullInputPath, fullOutputPath);
            }
            else
            {
                throw new InvalidOperationException($"{input} is not a valid file or directory");
            }
        }

        private void ProcessFile(string inputFile, string outputFile)
        {
            var output = preProcessor.Process(inputFile);
            WriteFinalOutput(output, inputFile, outputFile, Path.GetDirectoryName(inputFile));
        }

        private string GetHeader(string inputFile)
        {
            return
                "// WARNING: AUTO GENERATED BY KUSTO COMPILER." + Environment.NewLine +
                "// See vsclk-core repository for details." + Environment.NewLine +
                $"// Source File: {inputFile}" + Environment.NewLine;
        }

        private void ProcessDirectory(string inputPath, string outputPath, string wildcardFilter)
        {
            var sourceFiles = Directory.EnumerateFiles(inputPath, wildcardFilter, SearchOption.AllDirectories);

            foreach (var sourceFile in sourceFiles)
            {
                var relativePath = sourceFile.Remove(0, inputPath.Length);
                var compiledFile = Path.ChangeExtension($"{outputPath}{relativePath}", ".kql");
                Console.WriteLine($"Processing {sourceFile} --> {compiledFile}");
                var output = preProcessor.Process(sourceFile);

                var compiledFileDirectory = Path.GetDirectoryName(compiledFile);
                if (!Directory.Exists(compiledFileDirectory))
                {
                    Directory.CreateDirectory(compiledFileDirectory);
                }

                WriteFinalOutput(output, sourceFile, compiledFile, inputPath);
            }
        }

        private void WriteFinalOutput(string content, string inputFile, string outputFile, string baseFolder)
        {
            var sb = new StringBuilder();
            sb.Append(GetHeader(inputFile.Remove(0, baseFolder.Length)));
            sb.Append(content);
            File.WriteAllText(outputFile, sb.ToString());
        }
    }
}
