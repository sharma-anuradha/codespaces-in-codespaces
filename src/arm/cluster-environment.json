{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appSpObjectId": {
      "type": "string"
    },
    "devOpsSpObjectId": {
      "type": "string"
    },
    "env": {
      "type": "string"
    },
    "resourceNamePrefix": {
      "type": "string"
    },
    "serviceName": {
      "type": "string"
    },
    "teamObjectId": {
      "type": "string"
    },
    "userObjectId": {
      "type": "string"
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "tenantId": "[subscription().tenantId]",
    "appSpObjectId": "[parameters('appSpObjectId')]",
    "devOpsSpObjectId": "[parameters('devOpsSpObjectId')]",
    "env": "[parameters('env')]",
    "resourceNamePrefix": "[parameters('resourceNamePrefix')]",
    "serviceName": "[parameters('serviceName')]",
    "teamObjectId": "[parameters('teamObjectId')]",
    "userObjectId": "[parameters('userObjectId')]",
    "baseResourceName": "[concat(variables('resourceNamePrefix'),'-',variables('serviceName'),'-',variables('env'))]",
    "vnetName": "[concat(variables('baseResourceName'),'-vnet')]",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "databaseAccountName": "[concat(variables('baseResourceName'),'-db')]",
    "databaseAccountId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccountName'))]",
    "databaseAccountKind": "GlobalDocumentDB",
    "databaseAccountDefaultConsistencyLevel": "Session",
    "databaseAccountOfferType": "Standard",
    "datababseAccountFailoverPriority": 0,
    "databaseThrottledRequestsRuleName": "[concat(variables('databaseAccountName'),'-throttled-requests')]",
    "databaseThrottedlRequestsThreshold": 5,
    "databaseThrottledRequestswindowSize": "PT30M",
    "databaseThrottledRequestsEmailAddress": "cascadecore@microsoft.com",
    "keyVaultName": "[concat(variables('baseResourceName'),'-kv')]",
    "azureServiceDeploymentInternalId": "175890fa-bd80-4743-86d9-faed7653f078",
    "azureServiceDeploymentKeyVaultAccessPolicies": [
      {
        "objectId": "[variables('azureServiceDeploymentInternalId')]",
        "tenantId": "[variables('tenantId')]",
        "permissions": {
          "secrets": [
            "Get",
            "List"
          ]
        }
      }
    ],
    "devOpsSpKeyVaultAccessPolicies": [
      {
        "objectId": "[variables('devOpsSpObjectId')]",
        "tenantId": "[variables('tenantId')]",
        "permissions": {
          "secrets": [
            "Get",
            "List",
            "Set"
          ]
        }
      }
    ],
    "appSpKeyVaultAccessPolicies": [
      {
        "objectId": "[variables('appSpObjectId')]",
        "tenantId": "[variables('tenantId')]",
        "permissions": {
          "secrets": [
            "Get",
            "List"
          ]
        }
      }
    ],
    "teamKeyVaultAccessPolicies": [
      {
        "objectId": "[variables('teamObjectId')]",
        "tenantId": "[variables('tenantId')]",
        "permissions": {
          "secrets": [
            "All"
          ],
          "keys": [
            "All"
          ],
          "certificates": [
            "All"
          ]
        }
      }
    ],
    "userKeyVaultAccessPolicies": [
      {
        "objectId": "[variables('userObjectId')]",
        "tenantId": "[variables('tenantId')]",
        "permissions": {
          "secrets": [
            "All"
          ],
          "keys": [
            "All"
          ],
          "certificates": [
            "All"
          ]
        }
      }
    ],
    "emptyArray": [],
    "keyVaultAccessPolicies0": "[concat(variables('azureServiceDeploymentKeyVaultAccessPolicies'),variables('devOpsSpKeyVaultAccessPolicies'),variables('appSpKeyVaultAccessPolicies'))]",
    "keyVaultAccessPolicies1": "[if(not(equals(variables('userObjectId'), variables('devOpsSpObjectId'))),variables('userKeyVaultAccessPolicies'),variables('emptyArray'))]",
    "keyVaultAccessPolicies2": "[if(equals(variables('env'), 'dev'), variables('teamKeyVaultAccessPolicies'),variables('emptyArray'))]",
    "keyVaultAccessPolicies": "[concat(variables('keyVaultAccessPolicies0'),variables('keyVaultAccessPolicies1'),variables('keyVaultAccessPolicies2'))]"
  },
  "resources": [
    {
      "comments": "** Environment Key Vault **",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[variables('tenantId')]",
        "accessPolicies": "[variables('keyVaultAccessPolicies')]",
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2018-12-01",
      "name": "[variables('vnetName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "serviceEndpoints": [
                {
                  "provisioningState": "Succeeded",
                  "service": "Microsoft.AzureCosmosDB",
                  "locations": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
      "comments": "***** Environment CosmosDB Database Account *****",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('databaseAccountName')]",
      "apiVersion": "2015-04-08",
      "location": "[variables('location')]",
      "kind": "[variables('databaseAccountKind')]",
      "properties": {
        "name": "[variables('databaseAccountName')]",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": true,
        "isVirtualNetworkFilterEnabled": true,
        "virtualNetworkRules": [
          {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'default')]"
          }
        ],
        "consistencyPolicy": {
          "defaultConsistencyLevel": "[variables('databaseAccountDefaultConsistencyLevel')]"
        },
        "locations": [
          {
            "locationName": "[variables('location')]",
            "failoverPriority": "[variables('datababseAccountFailoverPriority')]"
          }
        ],
        "databaseAccountOfferType": "[variables('databaseAccountOfferType')]"
      },
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "dependsOn": [
        "[variables('vnetId')]"
      ]
    },
    {
      "comments": "***** CosmosDB Database Account Alert Rule: Throttled Requests *****",
      "type": "microsoft.insights/alertrules",
      "name": "[variables('databaseThrottledRequestsRuleName')]",
      "apiVersion": "2016-03-01",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('databaseThrottledRequestsRuleName')]",
        "description": "[variables('databaseThrottledRequestsRuleName')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[variables('databaseAccountId')]",
            "metricNamespace": null,
            "metricName": "Throttled Requests"
          },
          "operator": "GreaterThan",
          "threshold": "[variables('databaseThrottedlRequestsThreshold')]",
          "windowSize": "[variables('databaseThrottledRequestswindowSize')]"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": false,
          "customEmails": [
            "[variables('databaseThrottledRequestsEmailAddress')]"
          ]
        }
      },
      "dependsOn": [
        "[variables('databaseAccountId')]"
      ]
    },
    {
      "comments": "***** KeyVault Secret For Cosmos DB Endpoint *****",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'),'/Config-AzureCosmosDbHost')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "contentType": "text/plain",
        "value": "[reference(variables('databaseAccountId')).documentEndpoint]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[variables('databaseAccountId')]"
      ]
    }
  ]
}