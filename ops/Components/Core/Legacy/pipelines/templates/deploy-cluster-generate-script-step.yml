# deploy-cluster-generate-script-step.yml

parameters:
  stage: ''
  serviceSubscription: ''
  servicePrefix: ''
  serviceName: ''
  serviceEnv: ''
  serviceInstance: ''
  serviceLocation: ''
  serviceStamp: ''
  serviceStampLocation: ''
  regions: []
  dnsName: ''
  clusterVersion: ''
  clusterNodeCount: ''
  teamGroupId: ''
  sslCertKeyvaultName: ''
  sslCertSecrets: ''
  signlrEnabled: false
  signlrCapacity: ''
  signlrCapacityCapacity: ''
  portForwardingEnabled: false

steps:
- task: Bash@3
  displayName: Generate bootstrap script for ${{ parameters.servicePrefix}}-${{ parameters.serviceName }}-${{ parameters.serviceEnv }}-${{ parameters.serviceInstance }}-${{ parameters.serviceStamp }}
  env:
    stamp: ${{ parameters.servicePrefix}}-${{ parameters.serviceName }}-${{ parameters.serviceEnv }}-${{ parameters.serviceInstance }}-${{ parameters.serviceStamp }}
    arguments: --stage ${{ parameters.stage }} --subscription=${{ parameters.serviceSubscription}} --prefix=${{ parameters.servicePrefix }} --name=${{ parameters.serviceName }} --env=${{ parameters.serviceEnv }} --instance=${{ parameters.serviceInstance }} --location=${{ parameters.serviceLocation }} --stamp=${{ parameters.serviceStamp }} --stamp-location=${{ parameters.serviceStampLocation }} --dns-name=${{ parameters.dnsName }} --cluster-version=${{ parameters.clusterVersion }} --cluster-node-count=${{ parameters.clusterNodeCount }} --signlr-enabled=${{ parameters.signlrEnabled }} --signlr-capacity=${{ parameters.signlrCapacity }} --signlr-capacity-sec=${{ parameters.signlrCapacitySecondary }} --port-forwarding-enabled=${{ parameters.portForwardingEnabled }} --team-group-id=${{ parameters.teamGroupId }} --ssl-cert-kv-name=${{ parameters.sslCertKeyvaultName }} --ssl-cert-secrets=${{ parameters.sslCertSecrets }} --regions=${{ join(',', parameters.regions) }}
    artifacts: $(Build.ArtifactStagingDirectory)
    repo: $(Build.Repository.Uri)
    branch: $(Build.SourceBranch)
    commit: $(Build.SourceVersion)
    buildDef: $(Build.DefinitionName)
    subscription: ${{ parameters.serviceSubscription }}
  inputs:
    targetType: inline
    script: |
      #!/bin/bash
      additional_args="\$@"
      set -o pipefail -o nounset
      scriptName="bootstrap-${stamp}.sh"
      readmeName="bootstrap-${stamp}.README.md"
      outputName="${artifacts}/${scriptName}"
      outputReadme="${artifacts}/${readmeName}"
      echo "script name: ${scriptName}"
      echo "output name: ${outputName}"
      echo "arguments: ${arguments}"
      echo "repo: ${repo}"
      echo "branch: ${branch}"
      echo "commit: ${commit}"
      echo "build definition: ${buildDef}"
      
      read -r -d '' script << $$$
      #!/bin/bash
      additional_args="$@"
      set -o errexit -o pipefail -o noclobber -o nounset

      echo "Calling deploy-cluster for ${stamp}"
      echo "arguments: ${arguments} ${additional_args}"

      ./scripts/bash/deploy-cluster.sh ${arguments} ${additional_args}

      $$$

      read -r -d '' readme << $$$
      # ${scriptName}

      This bootstrapping script was generated for ${stamp}. The script must be run by a user with Owner access in subscription ${subscription}.

      - Repo: ${repo}
      - Branch: ${branch}
      - Commit: ${commit}
      - Build definition: ${buildDef}
      - Generated on: $(date)

      ## Options

      \`\`\`txt
          --dry-run   do not create or deploye Azure resources
      -h, --help      show help
      -v, --verbose   emit verbose info
      -d, --debug     emit debug info
      \`\`\`

      $$$
      echo "---------------"
      echo "$script"
      echo "---------------"
      echo "$script" > "${outputName}"
      echo "Generated script: ${outputName}"
      echo "$readme" > "${outputReadme}"
      echo "Generated readme file: ${outputReadme}"