{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "maxLength": 4
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "test",
        "dev",
        "ppe",
        "prod"
      ],
      "maxLength": 4
    },
    "opsSpId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "adminsGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "contributorsGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "breakGlassGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "readersGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "isNonProduction": {
      "type": "bool"
    }
  },
  "variables": {
    // Constants / well-known values
    "component": "core",
    "plane": "ops",
    "tenantId": "[subscription().tenantId]",
    "location": "[resourceGroup().location]",
    // Map parameters to variables
    "prefix": "[parameters('prefix')]",
    "env": "[parameters('env')]",
    "opsSpId": "[parameters('opsSpId')]",
    "adminsGroup": "[parameters('adminsGroup')]",
    "contributorsGroup": "[parameters('contributorsGroup')]",
    "breakGlassGroup": "[parameters('breakGlassGroup')]",
    "readersGroup": "[parameters('readersGroup')]",
    "isNonProduction": "[parameters('isNonProduction')]",
    // Resource Names
    "baseName": "[concat(variables('prefix'),'-',variables('component'),'-',variables('env'),'-',variables('plane'))]",
    "keyVaultName": "[concat(variables('baseName'),'-kv2')]",
    "containerRegistryName": "[replace(concat(variables('baseName'),'-acr'),'-','')]",
    "containerRegistryId": "[resourceId('Microsoft.ContainerRegistry/registries',variables('containerRegistryName'))]",
    // Key Vault Access Policies
    "listOnlyPermissions": {
      "keys": [
        "List"
      ],
      "secrets": [
        "List"
      ],
      "certificates": [
        "List"
      ]
    },
    "fullPermissions": {
      "keys": [
        "All"
      ],
      "secrets": [
        "All"
      ],
      "certificates": [
        "All"
      ]
    },
    "listOnlyOrFullPermissions": "[if(variables('isNonProduction'),variables('fullPermissions'),variables('listOnlyPermissions'))]",
    // Role definition ids
    "acrPullRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
    "acrPushRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','8311e382-0749-4cb8-b61a-304f252e45ec')]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[variables('keyVaultName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[variables('tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[variables('adminsGroup')]",
            "permissions": "[variables('listOnlyOrFullPermissions')]"
          },
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[variables('contributorsGroup')]",
            "permissions": "[variables('listOnlyOrFullPermissions')]"
          },
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[variables('readersGroup')]",
            "permissions": "[variables('listOnlyPermissions')]"
          },
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[variables('breakGlassGroup')]",
            "permissions": "[variables('fullPermissions')]"
          }
        ],
        "enabledForDeployment": true,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": false
      }
    },
    // Ops container registry, e.g., vscscore{env}opsacr.
    // Contains docker container image build outputs,
    // that will be promoted to control-plane container registries.
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "name": "[variables('containerRegistryName')]",
      "apiVersion": "2019-12-01-preview",
      "location": "[variables('location')]",
      "sku": {
        "name": "Premium",
        "tier": "Premium"
      },
      "properties": {
        "adminUserEnabled": false,
        "networkRuleSet": {
          "defaultAction": "Allow",
          "virtualNetworkRules": [],
          "ipRules": []
        },
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": 7,
            "status": "disabled"
          }
        },
        "encryption": {
          "status": "disabled"
        },
        "dataEndpointEnabled": false,
        "publicNetworkAccess": "Enabled"
      }
    },
    // Assign AcrPull to the ops service principal
    {
      "name": "[guid(subscription().id,variables('opsSpId'),variables('acrPullRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('acrPullRoleId')]",
        "principalId": "[variables('opsSpId')]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]",
        "canDelegate": false
      }
    },
    // Assign AcrPush to the ops service principal
    {
      "name": "[guid(subscription().id,variables('opsSpId'),variables('acrPushRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('acrPushRoleId')]",
        "principalId": "[variables('opsSpId')]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]",
        "canDelegate": false
      }
    }
  ]
}