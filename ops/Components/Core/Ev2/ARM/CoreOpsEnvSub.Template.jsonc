{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "maxLength": 4
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "test",
        "dev",
        "ppe",
        "prod"
      ],
      "maxLength": 4
    },
    "location": {
      "type": "string"
    },
    "opsSpId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "adminsGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "contributorsGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "breakGlassGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "readersGroup": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36
    },
    "isNonProduction": {
      "type": "bool"
    }
  },
  "variables": {
    // Constants / well-known values
    "component": "core",
    "plane": "ops",
    "tenantId": "[subscription().tenantId]",
    "serviceTreeId": "8fa58105-2fc7-4ffb-8d9e-5654c301864b",
    "serviceTreeUrl": "https://servicetree.msftcloudes.com/main.html#/ServiceModel/Home/8fa58105-2fc7-4ffb-8d9e-5654c301864b",
    // Map parameters to variables
    "prefix": "[parameters('prefix')]",
    "env": "[parameters('env')]",
    "location": "[parameters('location')]",
    "opsSpId": "[parameters('opsSpId')]",
    "adminsGroup": "[parameters('adminsGroup')]",
    "contributorsGroup": "[parameters('contributorsGroup')]",
    "breakGlassGroup": "[parameters('breakGlassGroup')]",
    "readersGroup": "[parameters('readersGroup')]",
    "isNonProduction": "[parameters('isNonProduction')]",
    // Resource names
    "baseName": "[concat(variables('prefix'),'-',variables('component'),'-',variables('env'),'-',variables('plane'))]",
    "resourceGroupName": "[variables('baseName')]",
    // Role definition ids
    "ownerRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
    "contributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "readerRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "azureServiceDeployContributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','21d96096-b162-414a-8302-d8354f9d91b2')]",
    "ownerOrReaderRoleId": "[if(variables('isNonProduction'),variables('ownerRoleId'),variables('readerRoleId'))]",
    "contributorOrReaderRoleId": "[if(variables('isNonProduction'),variables('contributorRoleId'),variables('readerRoleId'))]"
  },
  "resources": [
    // Tag the subscription with some useful stuff
    {
      "name": "default",
      "type": "Microsoft.Resources/tags",
      "apiVersion": "2020-06-01",
      "properties": {
        "tags": {
          "prefix": "[variables('prefix')]",
          "component": "[variables('component')]",
          "env": "[variables('env')]",
          "plane": "[variables('plane')]",
          "serviceTreeId": "[variables('serviceTreeId')]",
          "serviceTreeUrl": "[variables('serviceTreeUrl')]"
        }
      }
    },
    // Create the shared resource group, e.g., vscs-core-{env}-ops
    {
      "name": "[variables('resourceGroupName')]",
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "location": "[variables('location')]"
    },
    // Assign Contributor to the Ops service principal, e.g., vscs-core-{env}-ops-sp
    {
      "name": "[guid(subscription().id,variables('opsSpId'),variables('contributorRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleId')]",
        "principalId": "[variables('opsSpId')]",
        "principalType": "ServicePrincipal",
        "canDelegate": false
      }
    },
    // Assign Azure Service Deploy Release Management Contributor to the Ops service principal
    {
      "name": "[guid(subscription().id,variables('opsSpId'),variables('azureServiceDeployContributorRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('azureServiceDeployContributorRoleId')]",
        "principalId": "[variables('opsSpId')]",
        "principalType": "ServicePrincipal",
        "canDelegate": false
      }
    },
    // Assign Reader to the team readers group
    {
      "name": "[guid(subscription().id,variables('readersGroup'),variables('readerRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('readerRoleId')]",
        "principalId": "[variables('readersGroup')]",
        "principalType": "Group",
        "canDelegate": false
      }
    },
    // Assign Owner or Reader to the team Admins group
    {
      "name": "[guid(subscription().id,variables('adminsGroup'),variables('ownerOrReaderRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('ownerOrReaderRoleId')]",
        "principalId": "[variables('adminsGroup')]",
        "principalType": "Group",
        "canDelegate": false
      }
    },
    // Assign Owner or Reader to the team Contribututors group
    {
      "name": "[guid(subscription().id,variables('contributorsGroup'),variables('contributorOrReaderRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('contributorOrReaderRoleId')]",
        "principalId": "[variables('contributorsGroup')]",
        "principalType": "Group",
        "canDelegate": false
      }
    },
    // Assign Owner to the team break-glass group
    {
      "name": "[guid(subscription().id,variables('breakGlassGroup'),variables('ownerRoleId'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "properties": {
        "roleDefinitionId": "[variables('ownerRoleId')]",
        "principalId": "[variables('breakGlassGroup')]",
        "principalType": "Group",
        "canDelegate": false
      }
    }
  ]
}