# deploy-cluster-stage.yml

# This template invokes the deploy-cluster.sh script, where all the heavy-lifting occurs.
# The script uses a combination of Azure CLI, ARM Templates, and Helm for deployment.
# Usage: deploy-cluster.sh [options]
#      --stage                  bootstrap, common, stamp, cluster
#  -s, --subscription           the subscription name or id [optional]
#  -p, --prefix                 the service name prefix, for example, 'vsclk'
#  -n, --name                   the service base name
#  -e, --env                    the service environment, 'dev', 'ppe', 'prod', 'rel'
#  -i, --instance               the service instance name, defaults to env name
#  -l, --location               the service primary location
#  -m, --stamp                  the service stamp name
#      --stamp-location         the service stamp name
#      --dns-name               the service instance dns name
#      --signlr-enabled
#      --signlr-capacity
#      --signlr-capacity-sec
#      --team-group-id          the dev team group object id
#      --ssl-cert-kv-name       the azure key vault that contains the default ssl certificate
#      --ssl-cert-secrets       the list of key-value pairs for all ssl certificates in for form "deployed-name:keyvault-name,"
#      --validate-only          validate ARM templates, do not deploy
#      --dry-run                do not create or deploye Azure resources
#  -h, --help                   show help
#  -v, --verbose                emit verbose info
#  -d, --debug                  emit debug info

parameters:
  name: ''
  displayName: ''
  dependsOn: []
  pool: ''
  stage: ''
  serviceConnector: ''
  serviceSubscription: ''
  servicePrefix: ''
  serviceName: ''
  serviceEnv: ''
  serviceInstance: ''
  serviceLocation: ''
  serviceStamp: ''
  serviceStampLocation: ''
  regions: []
  dnsName: ''
  clusterVersion: ''
  clusterNodeCount: ''
  teamGroupId: ''
  sslCertKeyvaultName: ''
  sslCertSecrets: ''
  flags: ''
  continueOnError: false
  helmVersion: ''
  kubectlVersion: ''
  signlrEnabled: false
  signlrCapacity: ''
  signlrCapacitySecondary: ''
  portForwardingEnabled: false

stages:
- stage: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  dependsOn: ${{ parameters.dependsOn }}
  variables:
    environment: ${{ parameters.servicePrefix}}-${{ parameters.serviceName }}-${{ parameters.serviceEnv }}-${{ parameters.serviceInstance }}
  jobs:
  - deployment: ${{ parameters.name }}_Deployment
    environment: ${{ variables.environment }}
    pool:
      name: ${{ parameters.pool }}
    displayName: ${{ parameters.displayName }} to ${{ variables.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: false
            fetchDepth: 1
            lfs: true
            path: vsclk_cluster
          - task: HelmInstaller@0
            displayName: 'Install Helm'
            inputs:
              helmVersion: '${{ parameters.helmVersion }}'
              checkLatestHelmVersion: false
              kubectlVersion: '${{ parameters.kubectlVersion }}'
              checkLatestKubectl: false
          - task: AzureCLI@1
            displayName: deploy-cluster.sh --stage ''${{ parameters.stage }}''
            inputs:
              azureSubscription: ${{ parameters.serviceConnector }}
              scriptPath: $(System.DefaultWorkingDirectory)/src/scripts/bash/deploy-cluster.sh
              arguments: ${{ parameters.flags }} --stage ${{ parameters.stage }} --subscription=${{ parameters.serviceSubscription}} --prefix=${{ parameters.servicePrefix }} --name=${{ parameters.serviceName }} --env=${{ parameters.serviceEnv }} --instance=${{ parameters.serviceInstance }} --location=${{ parameters.serviceLocation }} --stamp=${{ parameters.serviceStamp }} --stamp-location=${{ parameters.serviceStampLocation }} --dns-name=${{ parameters.dnsName }} --cluster-version=${{ parameters.clusterVersion }} --cluster-node-count=${{ parameters.clusterNodeCount }} --signlr-enabled=${{ parameters.signlrEnabled }} --signlr-capacity=${{ parameters.signlrCapacity }} --signlr-capacity-sec=${{ parameters.signlrCapacitySecondary }} --port-forwarding-enabled=${{ parameters.portForwardingEnabled }} --team-group-id=${{ parameters.teamGroupId }} --ssl-cert-kv-name=${{ parameters.sslCertKeyvaultName }} --ssl-cert-secrets=${{ parameters.sslCertSecrets }} --regions=${{ join(',', parameters.regions) }}
              workingDirectory: $(System.DefaultWorkingDirectory)/src/scripts/bash/
              failOnStandardError: false
            continueOnError: ${{ parameters.continueOnError }}
