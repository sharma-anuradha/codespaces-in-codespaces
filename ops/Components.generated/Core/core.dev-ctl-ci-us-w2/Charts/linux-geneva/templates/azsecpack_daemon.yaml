apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: azsecpack-initializer-linux
  namespace: kube-system
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: azsecpack-initializer-linux
    spec:
      # This container will initialize and start the Azure Security Pack
      # on the host machine and validate that it is running.  It will fail
      # if it can not run correctly
      containers:
        - name: azsecpack-initializer-linux
          image: '{{ required "Value image.repositoryUrl not specified" .Values.image.repositoryUrl }}/{{ required "Value image.genevasecpackinstallName not specified" .Values.image.genevasecpackinstallName }}:{{ required "Value image.genevasecpackinstallTag not specified" .Values.image.genevasecpackinstallTag }}'
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /host
              name: azsecpack-host
              readOnly: false
            - mountPath: /secrets
              name: secrets
              readOnly: true
          env:
            - name: AzSecPack_RoleInstance
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AzSecPack_MachineName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
              # This needs to be set to 1 in order to not exit the container
              # unless there is an error or the AzSecPack fails
            - name: AzSecPack_MonitorForFailure
              value: '1'
           
            - name: AzSecPack_GCS_cert 
              value: '{{ required "Value config.AzSecPack_GCS_cert not specified" .Values.config.AzSecPack_GCS_cert }}' 
            - name: AzSecPack_GCS_key 
              value: '{{ required "Value config.AzSecPack_GCS_key not specified" .Values.config.AzSecPack_GCS_key }}'
            - name: AzSecPack_GCS_Environment 
              value: '{{ required "Value config.AzSecPack_GCS_Environment not specified" .Values.config.AzSecPack_GCS_Environment }}' 
            - name: AzSecPack_GCS_Account 
              value: '{{ required "Value config.AzSecPack_GCS_Account not specified" .Values.config.AzSecPack_GCS_Account }}' 
            - name: AzSecPack_EventVersion # Note that the version must match the GCS configuration XML entry 
              value: '{{ required "Value config.AzSecPack_EventVersion not specified" .Values.config.AzSecPack_EventVersion }}' 
            - name: AzSecPack_Timestamp # Note that the timestamp match the GCS configuration XML entry 
              value: '{{ required "Value config.AzSecPack_Timestamp not specified" .Values.config.AzSecPack_Timestamp }}'
            - name: AzSecPack_Namespace 
              value: '{{ required "Value config.AzSecPack_Namespace not specified" .Values.config.AzSecPack_Namespace }}' 
            - name: AzSecPack_Moniker 
              value: '{{ required "Value config.AzSecPack_SecurityMoniker not specified" .Values.config.AzSecPack_SecurityMoniker }}' 
            - name: AzSecPack_Tenant 
              value: '{{ required "Value config.AzSecPack_Tenant not specified" .Values.config.AzSecPack_Tenant }}' 
            - name: AzSecPack_Role 
              value: '{{ required "Value config.AzSecPack_Role not specified" .Values.config.AzSecPack_Role }}'

      initContainers:
        # download secrets
        - name: keyvault-agent
          image: '{{ required "Value image.repositoryUrl not specified" .Values.image.repositoryUrl }}/{{ required "Value image.acskeyvaultagentName not specified" .Values.image.acskeyvaultagentName }}:{{ required "Value image.acskeyvaultagentTag not specified" .Values.image.acskeyvaultagentTag }}'
          env:
            - name: VAULT_BASE_URL
              value: '{{ required "Value KeyVault not specified" .Values.config.KeyVault }}'
            - name: SERVICE_PRINCIPLE_FILE_PATH
              value: /host/azure.json
            - name: SECRETS_FOLDER
              value: '/secrets'
            - name: SECRETS_KEYS
              value: '{{ required "Value AzSecPack_GCS_cert_name not specified" .Values.config.AzSecPack_GCS_cert_name }}'
          volumeMounts:
            - name: secrets
              mountPath: '/secrets'
            - name: host-sp
              mountPath: /host
              readOnly: true
      nodeSelector:
        beta.kubernetes.io/os: linux
      volumes:
        # we want the secrets to reside only in-memory
        - name: secrets
          emptyDir:
            medium: Memory

        - name: host-sp
          hostPath:
            # this file contains the cluster service-principal, it exists on every node by default
            path: /etc/kubernetes

        # Yes, we map in the whole host as the azsecpack operates across the host
        - name: azsecpack-host
          hostPath:
            path: /